name: Deploy to ECR

on:
  push:
    branches:
      - main
env:
  AWS_REGION: us-east-1
  ECS_LOGIN_SERVICE_TASK_DEFINITION: ./.aws/task-definition-ls.json
  LOGIN_SERVICE_CONTAINER_NAME: login_service
  LOGIN_ECS_SERVICE: login_service
  ECS_NGINX_SERVICE_TASK_DEFINITION: ./.aws/task-definition-nginx.json
  NGINX_SERVICE_CONTAINER_NAME: nginx
  NGINX_ECS_SERVICE: nginx_service

  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  ECS_CLUSTER: MyEcsCluster
  ECR_REPOSITORY: ${{ secrets.ECR_REPO }}

jobs:
  push_images_ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Start the process of deployment to ECS
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_MESSAGE: "Start deploy backend service :green_heart:"
          SLACK_TITLE: Deploy start

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set essential login AWS details to configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create production env file
        run: |
          cd ${{ github.workspace }}
          # Create production environment files
          echo "ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > services/login/.env
          echo "PORT=8003" >> services/login/.env
          echo "SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> services/login/.env
          echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> services/login/.env
          echo "OS_NODE=${{ secrets.OS_NODE }}" >> services/login/.env
          echo "OS_PASSWORD=${{ secrets.OS_PASSWORD }}" >> services/login/.env
          echo "OS_USERNAME=${{ secrets.OS_USERNAME }}" >> services/login/.env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> services/login/.env
          echo "GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}" >> services/login/.env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> services/login/.env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> services/login/.env

      - name: Create nginx.conf file
        env:
          EC2_PUBLIC_HOST_NAME: ${{ secrets.EC2_PUBLIC_HOST_NAME }}
          ALB_SERVER_DNS: ${{ secrets.ALB_SERVER_DNS }}
          ALB_SERVER_PORT: ${{ secrets.ALB_SERVER_PORT }}
        run: |
          cd ./nginx
          envsubst '${EC2_PUBLIC_HOST_NAME}''${EC2_PUBLIC_HOST_NAME} ${ALB_SERVER_DNS} ${ALB_SERVER_PORT}' < nginx.template.conf > nginx.conf
          cat nginx.conf

      - name: Build and tag the Docker images
        run: |
          docker-compose build
          docker images
          cat services/login/.env

      - name: Login in ECS
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Tag Login Service Docker image
        run: |
          docker tag login_service_image ${{ env.ECR_REPOSITORY }}/transition_website:login_service_image_${{ github.sha }}

      - name: Push Login Service Docker image to ECR Public
        run: |
          docker push ${{ env.ECR_REPOSITORY }}/transition_website:login_service_image_${{ github.sha }}

      - name: Tag Nginx Service Docker image
        run: |
          docker tag nginx_image ${{ env.ECR_REPOSITORY }}/transition_website:nginx_service_${{ github.sha }}

      - name: Push Nginx Service Docker image to ECR Public
        run: |
          docker push ${{ env.ECR_REPOSITORY }}/transition_website:nginx_service_${{ github.sha }}
  deploy_login_service:
    needs: push_images_ecr
    runs-on: ubuntu-latest
    steps:
      - name: Start deploy login service
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_MESSAGE: "Start deploy login service :heart:"
          SLACK_TITLE: Login-related

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set essential login AWS details to configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update task definition's container image
        id: login_service_task_def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_LOGIN_SERVICE_TASK_DEFINITION }}
          container-name: ${{ env.LOGIN_SERVICE_CONTAINER_NAME }}
          image: ${{ env.ECR_REPOSITORY }}/transition_website:login_service_image_${{ github.sha }}

      - name: Deploy Login Service Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.login_service_task_def.outputs.task-definition }}
          service: ${{ env.LOGIN_ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
  deploy_nginx_service:
    needs: deploy_login_service
    runs-on: ubuntu-latest
    steps:
      - name: Start deploy nginx service
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_MESSAGE: "Start deploy nginx service :green_heart:"
          SLACK_TITLE: Nginx-related

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set essential login AWS details to configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update task definition's container image FOR NGINX
        id: nginx_service_task_def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_NGINX_SERVICE_TASK_DEFINITION }}
          container-name: ${{ env.NGINX_SERVICE_CONTAINER_NAME }}
          image: ${{ env.ECR_REPOSITORY }}/transition_website:nginx_service_${{ github.sha }}

      - name: Deploy NGINX Service Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.nginx_service_task_def.outputs.task-definition }}
          service: ${{ env.NGINX_ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Notify in slack when deployed into steady state
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_MESSAGE: "sucessfully deployed NGINX and login service onto ecs service and a steady state :rocket:"
          SLACK_TITLE: Success
