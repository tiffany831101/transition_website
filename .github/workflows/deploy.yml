name: Deploy to ECR

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set essential login AWS details to configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: <your_aws_region>

      - name: Set up environment variables
        run: |
          echo "ECR_REPOSITORY=transition_website" >> $GITHUB_ENV
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "DB_PWD=${{ secrets.DB_PWD }}" >> $GITHUB_ENV
          echo "DB_ROOT_ACCOUNT=${{ secrets.DB_ROOT_ACCOUNT }}" >> $GITHUB_ENV
          echo "DB_TABLE_NAME=${{ secrets.DB_TABLE_NAME }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> $GITHUB_ENV
          
      - name: Create production env file and Push to ECR  
        run: |
          # Create production environment files
          echo "DB_HOST=${DB_HOST}" > services/login/.env
          echo "DB_PORT=${DB_PORT}" >> services/login/.env
          echo "DB_PWD=${DB_PWD}" >> services/login/.env
          echo "DB_ROOT_ACCOUNT=${DB_ROOT_ACCOUNT}" > services/login/.env
          echo "DB_TABLE_NAME=${DB_TABLE_NAME}" >> services/login/.env
          echo "PORT=${PORT}" >> services/login/.env
          echo "APP_SECRET=${APP_SECRET}" > services/login/.env
          
          # Build and tag the Docker images
          docker-compose build

          # Log in to ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${ ECR_REPOSITORY }

          # Push the Docker images to ECR
          docker-compose push
